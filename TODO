TODO:

Priorities, August 2019 update:
    
    - Mode mutual exclusivity / rain button switches out of all modes
    - Trees


Code style work:

1. Deglobalize as much as possible
3. Incompatible with all versions of IE due to lack of ES6 support. Array.fill() is one culprit; refactor if changes are few and don't impact performance, otherwise use Babel transpiler.
4. Performance optimization


Implement:

1. Grading shovel that smooths an area
2. Standardize toolbar grid and place along edge not in scene
4. Trees and other local point modifiers (proximity modifier object class, usable for drains, trees, roads, etc.)
    - proximity method returns all analysis points within a radius
    - scale effect by distance
5. River object. Where the bedrock is at a local minimum, uses a shovel to dig soil to zero there and attaches a kill zone for physics bodies that reach the "river".
6. Display scale bars H and V
7. Fade during surface restoration to remove sudden jump.
    - stroke over relevant portion of surface
8. Mode mutual exclusivity / rain button switches out of all modes
9. Disable dragging while in shovel or dump mode
10. Dynamic window size scaling
11. Juice! 
    - shovel scrape in soil, clink on bedrock
    - truck beep beep on select, then whump on dump
    - landslide rumble
    - rain sound and thunder when raining
12. Get physics time? Can slow clock to match event time
13. Blast tool that cuts a bench onto bedrock
14. +/- soil everywhere button that adds a fixed increment per click
15. Slope increment tool
16. Additional measurements in info tool
17. Other advanced tools: pilings to bedrock, pier walls, drainage features, FS equation viewer


Fix:
1. Dog slow on SOME Windows machines and Mac Firefox. v0.3.0b seems to have slowed performance in firefox (major)
3. Shoveling with info shower active switches the active dot - related to dot IDs changing on redraw (moderate)
4. New points added above a saturating soil (during rain) are not correctly saturating. Existing points behave correctly considering their greater depth (minor)
5. Slider thickness ignores positive-definite soil thickness when reducing below bedrock (not currently using slider)
6. After slide recovery, balls do not properly kill upon being below the surface (minor)
7. Double check FS equation. (minor)
8. Dots plot on top of e.g. rain button (minor)


Sprite work:

1. Improve general appearance of things.
2. Cursor appearance overlays for tools.
3. Info icon active/over states.
4. Improve landslide chunks
    - color by depth, along with soil?


Scenario work:

1. Adjustable global thickness and angle for simple slope scenario
2. Columbia parkway scenario
3. Dirt pile scenario?


Major updates:

1. Mobile compatiblity - requires tool implementation changes
2. Load and run real rainfall sequence
    - Adjust saturation/drain rates to better match world time, and adjust world time rate
3. "Cost of building" game?


DONE:
√ Sometimes, points do not saturate if rain starts shortly after load (moderate)
√ Implement flat spot and other modifiers in world units
√ Slide surface sometimes removing hilltops when the hillside fails
        - it's related to the location of the slide plane on the bedrock - when hilltop soil is thinner than the threshold it's getting included in the snap-to.
√ Slide surface recovery can hang for a while.
    - seems to be fixed
√ Force low opposing slope at bottom of failure plane
    - largely fixed by updates to landslide behavior and a wider dx
√ Scale LS balls with world units
√ Recovery fix - calculate LS surfce while active and base local FS on that, preventing new landslides under an active one.
√ Fix dx issue: Breaks with dx != 1, an array length issue
√ Localize failure plane to bedrock surface if within a tolerance.
√ Increase active landslide limit
√ Dynamic scenario selection menu based on defined scenarios
√ Properly load parameters from interface
√ XMLHttpRequest SYNCHRONOUS LOAD of JSON config file is not a performance hit here because of tiny config files; however, it is deprecated and will lose browser support within a few years. ASYNCHRONOUS loading is not deprecated but makes assigning out to game variables a major hassle. Another solution will be needed - Should be able to load this through PHASER g.load.json.
√ Make sure scoping is correct overall for modularity
√ Implement modularity 
√ Parameters to interface
√ Testing on multiple browsers / older browsers to develop a compatibility profile
√ Reset button
√ Measurement tools
    - slope, saturation, cohesion
√ House and other "real object" sprites should scale with the physical coordinate system 
√ Balls not being killed when they accidentally cross into subsurface 
√ Set surface as only physics chain/bedrock separate chain is problematic
√ Still a fair number of balls killed when running over sharply convex obstacles
    - can be fixed by killing when below lowest adjacent point, rather than interpolation between (note: fixed interpolation routine instead :) ).
√ Analysis point properties
    √ requires topographic slope
√ Analysis point graphics
√ Failure plane finding and extrapolation
√ Slide bodies not being converted to balls when within a short range of the right boundary
    - (problem does not present now that we don't use the LS shovel)
√ Disallow digging of soil below bedrock surface by shovels?
√ Analysis point placement and update handling
    - Dots stay in place relative to soil body (more intuitively physical) and then are destroyed where the LS has ocurred or surface dug.
√ Balls generated on zero-thickness soil during LS
    - likely due to analysis points persisting below bedrock?
    - or bug in the thresholder/planefinder
        (was actually unenforced negative soil thicknesses in the doLandslide function)
√ Analysis point fade and reimposed upon changes to soil thickness
    - allow "sectoring" so only changed sectors are redotted
√ Saturation
    - requires rain timer and button or equiv test mechanism
√ Saturation wetting front
√ Test planefinder based on max depth instead of mean
√ Landslide plane not resetting properly due to "ghost" analysis points after a failure
√ Draw balls behind soil
√ Smooth/monotonize the failure plane (running average on elevation, convert back to depths?)
√ Are killed bodies that exit L side removed properly from the balls array?
√ Balls back to soil after not moving for a certain time
    - let each LS stabilize before checking for new landsliding
√ Landslide planefinding or FS calc needs a confinement term, so points bouded by stable points on the downill side don't fail. Ball resurfacing will help with this.
    - use slope of smallest chord projected across point as theta? 
        - this will be awkward at the edges
    - set slope window size based on horizontal distance to surface?
        - need horz projection. use interp1 to interp x-value between z-points? (monotonicity likely to be a problem. would need all intercepts and pick nearest)
    - (was largely solved by plane avaraging and surface restoration)
√ New points are not added by the dumping shovel in the vicinty of the left edge. Existing lower points respond to the added thickness. Appears to be a shovel-specific bug. Other additions there (slider, landslides) add points as expected. 
√ Digging deeply near uphill edge results in catastrophic failure of whole slope
    - possibly related to slope averaging window increase with depth?
    - it's the slope averaging combined with the extrapolated slope. digging near the edge can result in a large upward slope offscreen. Problematic with SlopeWindowFactor > 2, probably don't need that extreme anyway. Set to 2. But could limit max window size to reduce this issue if needed.
√ Rain button
√ Rain overlay
√ button states
√ house less tall
√ house physics poly to match shape
√ After slide recovery, analysis points are not replaced correctly. Could be a canvas/world scaling thing.
√ Occasional leftover ball after surface restoration (decided this was a feature)

    
        
DEPRECATED NOTES


**EOF**