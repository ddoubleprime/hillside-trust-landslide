// This example uses the Phaser 2.2.2 framework

// Copyright Â© 2015 John Watson
// Licensed under the terms of the MIT License

var GameState = function(game) {
};

// Load images and sounds
GameState.prototype.preload = function() {
    this.game.load.image('ground', '/assets/gfx/ground.png');
    this.game.load.image('ball', '/assets/gfx/ball.png');
};

// Setup the example
GameState.prototype.create = function() {
    // Set stage background color
    this.game.stage.backgroundColor = 0x4488cc;

    // Flag to show or hide the droplets making up the fluid
    this.debug = false;

    // Start the physics system
    this.game.physics.startSystem(Phaser.Physics.P2JS);

    // Add bounciness and gravity
    this.game.physics.p2.restitution = 0.8;
    this.game.physics.p2.gravity.y = 500;

    // Create a new droplet every 50ms
    this.fluid = this.game.add.group();
    var t = this.game.time.create();
    t.loop(50, this.addFluid, this);
    t.start();

    // Add WebGL shaders to "liquify" the droplets
    this.addShaders();

    // Check tap events
    this.game.input.onTap.add(this.tap, this);
};

// Add a single droplet with an initial velocity upwards to simulate a
// fountain.
GameState.prototype.addFluid = function() {
    var randomX = this.game.width/2;
    var randomY = this.game.height * 0.8;

    // Try to recycle a dead droplet from the fluid group first
    var droplet = this.fluid.getFirstDead();

    if (droplet) {
        // A recycled droplet was available, so reset it
        droplet.reset(randomX, randomY);
    } else {
        // No recycled droplets were available so make a new one
        droplet = this.game.add.sprite(randomX, randomY, 'ball');

        // Enable physics for the droplet
        this.game.physics.p2.enable(droplet);
        droplet.body.collideWorldBounds = true;

        // This makes the collision body smaller so that the droplets can get
        // really up close and goopy
        droplet.body.setCircle(droplet.width * 0.3);

        // Add a force that slows down the droplet over time
        droplet.body.damping = 0.3;

        // Add the droplet to the fluid group
        this.fluid.add(droplet);
    }

    // Show/hide the physics body
    droplet.body.debug = this.debug;

    // Initial velocity
    droplet.body.velocity.y = -600;
    droplet.body.velocity.x = this.game.rnd.between(-20, 20);
};

// Add fragment shaders to make the droplets look like a fluid.
GameState.prototype.addShaders = function() {
    var blurShader = this.game.add.filter('Blur');
    blurShader.blur = 32;
    var threshShader = this.game.add.filter('Threshold');
    this.fluid.filters = [ blurShader, threshShader ];
    this.fluid.filterArea = this.game.camera.view;
};

// Show/hide physics bodies when the screen is clicked/tapped
GameState.prototype.tap = function() {
    this.debug = !this.debug;
    this.fluid.setAll('body.debug', this.debug);
};

// The update() method is called every frame
GameState.prototype.update = function() {
    // Move droplets away from the pointer
    if (this.game.input.activePointer.withinGame) {
        this.fluid.forEachAlive(function(droplet) {
            var pointer = this.game.input.activePointer;
            var angle = Math.atan2(pointer.y - droplet.y, pointer.x - droplet.x);
            var distance = Phaser.Point.distance(pointer, droplet);
            if (distance < 80) {
                droplet.body.velocity.x = -Math.cos(angle) * 200;
                droplet.body.velocity.y = -Math.sin(angle) * 200;
            }
        }, this);
    }

    // Remove water that hits the ground
    this.fluid.forEachAlive(function(droplet) {
        if (droplet.y > this.game.height - 15) droplet.kill();
    }, this);
};
